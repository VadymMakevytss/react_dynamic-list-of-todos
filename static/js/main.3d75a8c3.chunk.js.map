{"version":3,"sources":["components/TodoList/TodoList.jsx","components/api/api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","state","searchTitle","selectBy","handleSelect","event","setState","handleSearchTitle","target","value","handleSelectUser","props","onSelect","segregateByStatus","status","filteredTodos","filter","todo","completed","todos","this","title","toLowerCase","includes","segregatedTodos","className","Card","Body","Title","InputGroup","Text","id","FormControl","type","placeholder","onChange","DropdownButton","size","align","lg","Dropdown","Item","as","href","map","key","name","checked","handleChecked","userId","onClick","Component","getUsers","req","a","fetch","response","json","data","CurrentUser","selectedUser","getUser","user","handleClearClick","clearForm","prevProps","email","phone","App","selectedUserId","componentDidMount","selectUser","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3d75a8c3.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './TodoList.scss';\nimport {\n  Card,\n  InputGroup,\n  FormControl,\n  DropdownButton,\n  Dropdown,\n} from 'react-bootstrap';\n\nexport class TodoList extends Component {\n  state = {\n    searchTitle: '',\n    selectBy: 'all',\n  }\n\n  handleSelect = (event) => {\n    this.setState({\n      selectBy: event,\n    });\n  };\n\n  handleSearchTitle = (event) => {\n    this.setState({ searchTitle: event.target.value });\n  };\n\n  handleSelectUser = (event) => {\n    this.props.onSelect(event.target.value);\n  };\n\n  segregateByStatus =(status, filteredTodos) => {\n    let selectedTodos = [];\n\n    if (status !== 'all') {\n      selectedTodos = filteredTodos.filter(todo => (status === 'active'\n        ? !todo.completed\n        : todo.completed));\n    } else {\n      selectedTodos = filteredTodos;\n    }\n\n    return selectedTodos;\n  }\n\n  render() {\n    const { todos } = this.props;\n    const { searchTitle, selectBy } = this.state;\n\n    const filteredTodos = todos.filter((todo) => {\n      if (todo.title === null) {\n        return false;\n      }\n\n      return todo.title.toLowerCase().includes(searchTitle.toLowerCase());\n    });\n\n    const segregatedTodos = this.segregateByStatus(selectBy, filteredTodos);\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <Card className=\"TodoList__list-container\">\n          <Card.Body>\n            <Card.Title>\n              <InputGroup className=\"mb-3\">\n                <InputGroup.Text id=\"basic-addon1\">\n                  Filter:\n                </InputGroup.Text>\n                <FormControl\n                  type=\"text\"\n                  placeholder=\"Search by title\"\n                  value={this.state.searchTitle}\n                  onChange={this.handleSearchTitle}\n                />\n                <DropdownButton\n                  className=\"mb-2\"\n                  size=\"lg\"\n                  align={{ lg: 'end' }}\n                  id=\"dropdown-basic-button\"\n                  title={this.state.selectBy}\n                  onSelect={this.handleSelect}\n                >\n                  <Dropdown.Item as=\"button\" href=\"all\" value=\"all\">\n                    all\n                  </Dropdown.Item>\n                  <Dropdown.Item as=\"button\" href=\"active\" value=\"active\">\n                    active\n                  </Dropdown.Item>\n                  <Dropdown.Item as=\"button\" href=\"completed\" value=\"completed\">\n                    completed\n                  </Dropdown.Item>\n                </DropdownButton>\n              </InputGroup>\n            </Card.Title>\n            <Card.Text>\n              <ul className=\"TodoList__list\">\n                {segregatedTodos.map(todo => (\n                  <li\n                    className={`\n                      TodoList__item\n                      TodoList__item${todo.completed\n                      ? '--checked'\n                      : '--unchecked'}`\n                      }\n                    key={todo.id}\n                  >\n                    <label>\n                      <input\n                        type=\"checkbox\"\n                        name={todo.id}\n                        checked={todo.completed}\n                        onChange={this.handleChecked}\n                      />\n                      <p>{todo.title}</p>\n                    </label>\n                    <button\n                      className=\"\n                        TodoList__user-button\n                        TodoList__user-button--selected\n                        button\"\n                      type=\"button\"\n                      value={todo.userId}\n                      onClick={this.handleSelectUser}\n                    >\n                      User&nbsp;\n                      {todo.userId}\n                    </button>\n                  </li>\n                ))}\n              </ul>\n            </Card.Text>\n          </Card.Body>\n        </Card>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf.isRequired,\n  onSelect: PropTypes.func.isRequired,\n};\n","// eslint-disable-next-line\nconst API_URL = 'https://mate-api.herokuapp.com';\n\nexport const getUsers = async(req) => {\n  const response = await fetch(`${API_URL}${req}`);\n  const todos = await response.json();\n\n  return todos.data;\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { getUsers } from '../api/api';\nimport './CurrentUser.scss';\n\nexport class CurrentUser extends Component {\n  state={\n    selectedUser: [],\n  }\n\n  componentDidMount() {\n    this.getUser();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      this.getUser();\n    }\n  }\n\n  getUser = async() => {\n    const user = await getUsers(`/users/${this.props.userId}`);\n\n    this.setState({\n      selectedUser: user,\n    });\n\n    return this.state.selectedUser;\n  }\n\n  handleClearClick = () => {\n    this.props.clearForm();\n    this.setState({\n      selectedUser: '',\n    });\n  }\n\n  render() {\n    const { id, name, email, phone } = this.state.selectedUser;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            {`Selected user: ${id}`}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{name}</h3>\n        <p className=\"CurrentUser__email\">{email}</p>\n        <p className=\"CurrentUser__phone\">{phone}</p>\n        <button\n          className=\"CurrentUser__clear\"\n          type=\"button\"\n          onClick={this.handleClearClick}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clearForm: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getUsers } from './components/api/api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  componentDidMount = async() => {\n    const todos = await getUsers('/todos');\n\n    this.setState({\n      todos,\n    });\n  }\n\n  selectUser = (userId) => {\n    this.setState({\n      selectedUserId: userId,\n    });\n  }\n\n  clearForm = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            onSelect={this.selectUser}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearForm={this.clearForm}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}